// Generated by gencpp from file hand_control/plan_for_goal_request.msg
// DO NOT EDIT!


#ifndef HAND_CONTROL_MESSAGE_PLAN_FOR_GOAL_REQUEST_H
#define HAND_CONTROL_MESSAGE_PLAN_FOR_GOAL_REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_control
{
template <class ContainerAllocator>
struct plan_for_goal_request_
{
  typedef plan_for_goal_request_<ContainerAllocator> Type;

  plan_for_goal_request_()
    : goal_state()
    , start_state()
    , goal_radius(0.0)
    , time_limit(0.0)
    , probability_success_threshold(0.0)
    , planning_algorithm()  {
    }
  plan_for_goal_request_(const ContainerAllocator& _alloc)
    : goal_state(_alloc)
    , start_state(_alloc)
    , goal_radius(0.0)
    , time_limit(0.0)
    , probability_success_threshold(0.0)
    , planning_algorithm(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _goal_state_type;
  _goal_state_type goal_state;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _start_state_type;
  _start_state_type start_state;

   typedef double _goal_radius_type;
  _goal_radius_type goal_radius;

   typedef double _time_limit_type;
  _time_limit_type time_limit;

   typedef double _probability_success_threshold_type;
  _probability_success_threshold_type probability_success_threshold;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _planning_algorithm_type;
  _planning_algorithm_type planning_algorithm;





  typedef boost::shared_ptr< ::hand_control::plan_for_goal_request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_control::plan_for_goal_request_<ContainerAllocator> const> ConstPtr;

}; // struct plan_for_goal_request_

typedef ::hand_control::plan_for_goal_request_<std::allocator<void> > plan_for_goal_request;

typedef boost::shared_ptr< ::hand_control::plan_for_goal_request > plan_for_goal_requestPtr;
typedef boost::shared_ptr< ::hand_control::plan_for_goal_request const> plan_for_goal_requestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_control::plan_for_goal_request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_control::plan_for_goal_request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_control::plan_for_goal_request_<ContainerAllocator1> & lhs, const ::hand_control::plan_for_goal_request_<ContainerAllocator2> & rhs)
{
  return lhs.goal_state == rhs.goal_state &&
    lhs.start_state == rhs.start_state &&
    lhs.goal_radius == rhs.goal_radius &&
    lhs.time_limit == rhs.time_limit &&
    lhs.probability_success_threshold == rhs.probability_success_threshold &&
    lhs.planning_algorithm == rhs.planning_algorithm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_control::plan_for_goal_request_<ContainerAllocator1> & lhs, const ::hand_control::plan_for_goal_request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_control::plan_for_goal_request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_control::plan_for_goal_request_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_control::plan_for_goal_request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_control::plan_for_goal_request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_control::plan_for_goal_request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_control::plan_for_goal_request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_control::plan_for_goal_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14a5c7b5abd5bbd2576cf26f819de0bc";
  }

  static const char* value(const ::hand_control::plan_for_goal_request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14a5c7b5abd5bbd2ULL;
  static const uint64_t static_value2 = 0x576cf26f819de0bcULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_control::plan_for_goal_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_control/plan_for_goal_request";
  }

  static const char* value(const ::hand_control::plan_for_goal_request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_control::plan_for_goal_request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] goal_state\n"
"float64[] start_state\n"
"float64 goal_radius\n"
"float64 time_limit\n"
"float64 probability_success_threshold\n"
"string planning_algorithm\n"
;
  }

  static const char* value(const ::hand_control::plan_for_goal_request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_control::plan_for_goal_request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_state);
      stream.next(m.start_state);
      stream.next(m.goal_radius);
      stream.next(m.time_limit);
      stream.next(m.probability_success_threshold);
      stream.next(m.planning_algorithm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plan_for_goal_request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_control::plan_for_goal_request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_control::plan_for_goal_request_<ContainerAllocator>& v)
  {
    s << indent << "goal_state[]" << std::endl;
    for (size_t i = 0; i < v.goal_state.size(); ++i)
    {
      s << indent << "  goal_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.goal_state[i]);
    }
    s << indent << "start_state[]" << std::endl;
    for (size_t i = 0; i < v.start_state.size(); ++i)
    {
      s << indent << "  start_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.start_state[i]);
    }
    s << indent << "goal_radius: ";
    Printer<double>::stream(s, indent + "  ", v.goal_radius);
    s << indent << "time_limit: ";
    Printer<double>::stream(s, indent + "  ", v.time_limit);
    s << indent << "probability_success_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.probability_success_threshold);
    s << indent << "planning_algorithm: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.planning_algorithm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_CONTROL_MESSAGE_PLAN_FOR_GOAL_REQUEST_H
