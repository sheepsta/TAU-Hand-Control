// Generated by gencpp from file hand_control/planrollRequest.msg
// DO NOT EDIT!


#ifndef HAND_CONTROL_MESSAGE_PLANROLLREQUEST_H
#define HAND_CONTROL_MESSAGE_PLANROLLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_control
{
template <class ContainerAllocator>
struct planrollRequest_
{
  typedef planrollRequest_<ContainerAllocator> Type;

  planrollRequest_()
    : goal()
    , planning_algorithm()  {
    }
  planrollRequest_(const ContainerAllocator& _alloc)
    : goal(_alloc)
    , planning_algorithm(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _goal_type;
  _goal_type goal;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _planning_algorithm_type;
  _planning_algorithm_type planning_algorithm;





  typedef boost::shared_ptr< ::hand_control::planrollRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_control::planrollRequest_<ContainerAllocator> const> ConstPtr;

}; // struct planrollRequest_

typedef ::hand_control::planrollRequest_<std::allocator<void> > planrollRequest;

typedef boost::shared_ptr< ::hand_control::planrollRequest > planrollRequestPtr;
typedef boost::shared_ptr< ::hand_control::planrollRequest const> planrollRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_control::planrollRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_control::planrollRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_control::planrollRequest_<ContainerAllocator1> & lhs, const ::hand_control::planrollRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal == rhs.goal &&
    lhs.planning_algorithm == rhs.planning_algorithm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_control::planrollRequest_<ContainerAllocator1> & lhs, const ::hand_control::planrollRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_control::planrollRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_control::planrollRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_control::planrollRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_control::planrollRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_control::planrollRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_control::planrollRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_control::planrollRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f57e29e5f8b15585eb45563f39f1d69e";
  }

  static const char* value(const ::hand_control::planrollRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf57e29e5f8b15585ULL;
  static const uint64_t static_value2 = 0xeb45563f39f1d69eULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_control::planrollRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_control/planrollRequest";
  }

  static const char* value(const ::hand_control::planrollRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_control::planrollRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] goal\n"
"string planning_algorithm\n"
;
  }

  static const char* value(const ::hand_control::planrollRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_control::planrollRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal);
      stream.next(m.planning_algorithm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct planrollRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_control::planrollRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_control::planrollRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal[]" << std::endl;
    for (size_t i = 0; i < v.goal.size(); ++i)
    {
      s << indent << "  goal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.goal[i]);
    }
    s << indent << "planning_algorithm: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.planning_algorithm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_CONTROL_MESSAGE_PLANROLLREQUEST_H
