// Generated by gencpp from file hand_control/planrollResponse.msg
// DO NOT EDIT!


#ifndef HAND_CONTROL_MESSAGE_PLANROLLRESPONSE_H
#define HAND_CONTROL_MESSAGE_PLANROLLRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_control
{
template <class ContainerAllocator>
struct planrollResponse_
{
  typedef planrollResponse_<ContainerAllocator> Type;

  planrollResponse_()
    : suc(false)
    , file()  {
    }
  planrollResponse_(const ContainerAllocator& _alloc)
    : suc(false)
    , file(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _suc_type;
  _suc_type suc;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _file_type;
  _file_type file;





  typedef boost::shared_ptr< ::hand_control::planrollResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_control::planrollResponse_<ContainerAllocator> const> ConstPtr;

}; // struct planrollResponse_

typedef ::hand_control::planrollResponse_<std::allocator<void> > planrollResponse;

typedef boost::shared_ptr< ::hand_control::planrollResponse > planrollResponsePtr;
typedef boost::shared_ptr< ::hand_control::planrollResponse const> planrollResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_control::planrollResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_control::planrollResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_control::planrollResponse_<ContainerAllocator1> & lhs, const ::hand_control::planrollResponse_<ContainerAllocator2> & rhs)
{
  return lhs.suc == rhs.suc &&
    lhs.file == rhs.file;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_control::planrollResponse_<ContainerAllocator1> & lhs, const ::hand_control::planrollResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_control::planrollResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_control::planrollResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_control::planrollResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_control::planrollResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_control::planrollResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_control::planrollResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_control::planrollResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "984465bc77c86570d6a1a5939a13a2de";
  }

  static const char* value(const ::hand_control::planrollResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x984465bc77c86570ULL;
  static const uint64_t static_value2 = 0xd6a1a5939a13a2deULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_control::planrollResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_control/planrollResponse";
  }

  static const char* value(const ::hand_control::planrollResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_control::planrollResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool suc\n"
"string file\n"
;
  }

  static const char* value(const ::hand_control::planrollResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_control::planrollResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.suc);
      stream.next(m.file);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct planrollResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_control::planrollResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_control::planrollResponse_<ContainerAllocator>& v)
  {
    s << indent << "suc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suc);
    s << indent << "file: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.file);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_CONTROL_MESSAGE_PLANROLLRESPONSE_H
