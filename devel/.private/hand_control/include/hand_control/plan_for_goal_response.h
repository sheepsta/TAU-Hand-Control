// Generated by gencpp from file hand_control/plan_for_goal_response.msg
// DO NOT EDIT!


#ifndef HAND_CONTROL_MESSAGE_PLAN_FOR_GOAL_RESPONSE_H
#define HAND_CONTROL_MESSAGE_PLAN_FOR_GOAL_RESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hand_control
{
template <class ContainerAllocator>
struct plan_for_goal_response_
{
  typedef plan_for_goal_response_<ContainerAllocator> Type;

  plan_for_goal_response_()
    : planned_actions()
    , planned_path()
    , reached_goal(false)  {
    }
  plan_for_goal_response_(const ContainerAllocator& _alloc)
    : planned_actions(_alloc)
    , planned_path(_alloc)
    , reached_goal(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _planned_actions_type;
  _planned_actions_type planned_actions;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _planned_path_type;
  _planned_path_type planned_path;

   typedef uint8_t _reached_goal_type;
  _reached_goal_type reached_goal;





  typedef boost::shared_ptr< ::hand_control::plan_for_goal_response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hand_control::plan_for_goal_response_<ContainerAllocator> const> ConstPtr;

}; // struct plan_for_goal_response_

typedef ::hand_control::plan_for_goal_response_<std::allocator<void> > plan_for_goal_response;

typedef boost::shared_ptr< ::hand_control::plan_for_goal_response > plan_for_goal_responsePtr;
typedef boost::shared_ptr< ::hand_control::plan_for_goal_response const> plan_for_goal_responseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hand_control::plan_for_goal_response_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hand_control::plan_for_goal_response_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hand_control::plan_for_goal_response_<ContainerAllocator1> & lhs, const ::hand_control::plan_for_goal_response_<ContainerAllocator2> & rhs)
{
  return lhs.planned_actions == rhs.planned_actions &&
    lhs.planned_path == rhs.planned_path &&
    lhs.reached_goal == rhs.reached_goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hand_control::plan_for_goal_response_<ContainerAllocator1> & lhs, const ::hand_control::plan_for_goal_response_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hand_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hand_control::plan_for_goal_response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hand_control::plan_for_goal_response_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_control::plan_for_goal_response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hand_control::plan_for_goal_response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_control::plan_for_goal_response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hand_control::plan_for_goal_response_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hand_control::plan_for_goal_response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99e054cfbf7412c793674c19bfc96a83";
  }

  static const char* value(const ::hand_control::plan_for_goal_response_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99e054cfbf7412c7ULL;
  static const uint64_t static_value2 = 0x93674c19bfc96a83ULL;
};

template<class ContainerAllocator>
struct DataType< ::hand_control::plan_for_goal_response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hand_control/plan_for_goal_response";
  }

  static const char* value(const ::hand_control::plan_for_goal_response_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hand_control::plan_for_goal_response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] planned_actions\n"
"float64[] planned_path\n"
"bool reached_goal\n"
;
  }

  static const char* value(const ::hand_control::plan_for_goal_response_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hand_control::plan_for_goal_response_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.planned_actions);
      stream.next(m.planned_path);
      stream.next(m.reached_goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct plan_for_goal_response_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hand_control::plan_for_goal_response_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hand_control::plan_for_goal_response_<ContainerAllocator>& v)
  {
    s << indent << "planned_actions[]" << std::endl;
    for (size_t i = 0; i < v.planned_actions.size(); ++i)
    {
      s << indent << "  planned_actions[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.planned_actions[i]);
    }
    s << indent << "planned_path[]" << std::endl;
    for (size_t i = 0; i < v.planned_path.size(); ++i)
    {
      s << indent << "  planned_path[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.planned_path[i]);
    }
    s << indent << "reached_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reached_goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAND_CONTROL_MESSAGE_PLAN_FOR_GOAL_RESPONSE_H
