// Generated by gencpp from file openhand_node/ReadSensorsResponse.msg
// DO NOT EDIT!


#ifndef OPENHAND_NODE_MESSAGE_READSENSORSRESPONSE_H
#define OPENHAND_NODE_MESSAGE_READSENSORSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace openhand_node
{
template <class ContainerAllocator>
struct ReadSensorsResponse_
{
  typedef ReadSensorsResponse_<ContainerAllocator> Type;

  ReadSensorsResponse_()
    : force()
    , flex()  {
    }
  ReadSensorsResponse_(const ContainerAllocator& _alloc)
    : force(_alloc)
    , flex(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _force_type;
  _force_type force;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _flex_type;
  _flex_type flex;





  typedef boost::shared_ptr< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ReadSensorsResponse_

typedef ::openhand_node::ReadSensorsResponse_<std::allocator<void> > ReadSensorsResponse;

typedef boost::shared_ptr< ::openhand_node::ReadSensorsResponse > ReadSensorsResponsePtr;
typedef boost::shared_ptr< ::openhand_node::ReadSensorsResponse const> ReadSensorsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openhand_node::ReadSensorsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::openhand_node::ReadSensorsResponse_<ContainerAllocator1> & lhs, const ::openhand_node::ReadSensorsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.force == rhs.force &&
    lhs.flex == rhs.flex;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::openhand_node::ReadSensorsResponse_<ContainerAllocator1> & lhs, const ::openhand_node::ReadSensorsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace openhand_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66a7e3259388f1b961ed214d82e3163f";
  }

  static const char* value(const ::openhand_node::ReadSensorsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66a7e3259388f1b9ULL;
  static const uint64_t static_value2 = 0x61ed214d82e3163fULL;
};

template<class ContainerAllocator>
struct DataType< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openhand_node/ReadSensorsResponse";
  }

  static const char* value(const ::openhand_node::ReadSensorsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] force\n"
"float32[] flex\n"
"\n"
"\n"
;
  }

  static const char* value(const ::openhand_node::ReadSensorsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.force);
      stream.next(m.flex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReadSensorsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openhand_node::ReadSensorsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openhand_node::ReadSensorsResponse_<ContainerAllocator>& v)
  {
    s << indent << "force[]" << std::endl;
    for (size_t i = 0; i < v.force.size(); ++i)
    {
      s << indent << "  force[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.force[i]);
    }
    s << indent << "flex[]" << std::endl;
    for (size_t i = 0; i < v.flex.size(); ++i)
    {
      s << indent << "  flex[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.flex[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENHAND_NODE_MESSAGE_READSENSORSRESPONSE_H
