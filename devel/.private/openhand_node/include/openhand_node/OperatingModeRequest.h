// Generated by gencpp from file openhand_node/OperatingModeRequest.msg
// DO NOT EDIT!


#ifndef OPENHAND_NODE_MESSAGE_OPERATINGMODEREQUEST_H
#define OPENHAND_NODE_MESSAGE_OPERATINGMODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace openhand_node
{
template <class ContainerAllocator>
struct OperatingModeRequest_
{
  typedef OperatingModeRequest_<ContainerAllocator> Type;

  OperatingModeRequest_()
    : pos_control()
    , servo_indices()  {
    }
  OperatingModeRequest_(const ContainerAllocator& _alloc)
    : pos_control(_alloc)
    , servo_indices(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _pos_control_type;
  _pos_control_type pos_control;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _servo_indices_type;
  _servo_indices_type servo_indices;





  typedef boost::shared_ptr< ::openhand_node::OperatingModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::openhand_node::OperatingModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OperatingModeRequest_

typedef ::openhand_node::OperatingModeRequest_<std::allocator<void> > OperatingModeRequest;

typedef boost::shared_ptr< ::openhand_node::OperatingModeRequest > OperatingModeRequestPtr;
typedef boost::shared_ptr< ::openhand_node::OperatingModeRequest const> OperatingModeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::openhand_node::OperatingModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::openhand_node::OperatingModeRequest_<ContainerAllocator1> & lhs, const ::openhand_node::OperatingModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pos_control == rhs.pos_control &&
    lhs.servo_indices == rhs.servo_indices;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::openhand_node::OperatingModeRequest_<ContainerAllocator1> & lhs, const ::openhand_node::OperatingModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace openhand_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::openhand_node::OperatingModeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::openhand_node::OperatingModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::openhand_node::OperatingModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8547873d748d03d91291c7bd0d1e2a7d";
  }

  static const char* value(const ::openhand_node::OperatingModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8547873d748d03d9ULL;
  static const uint64_t static_value2 = 0x1291c7bd0d1e2a7dULL;
};

template<class ContainerAllocator>
struct DataType< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "openhand_node/OperatingModeRequest";
  }

  static const char* value(const ::openhand_node::OperatingModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[] pos_control\n"
"int32[] servo_indices\n"
;
  }

  static const char* value(const ::openhand_node::OperatingModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos_control);
      stream.next(m.servo_indices);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OperatingModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::openhand_node::OperatingModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::openhand_node::OperatingModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "pos_control[]" << std::endl;
    for (size_t i = 0; i < v.pos_control.size(); ++i)
    {
      s << indent << "  pos_control[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pos_control[i]);
    }
    s << indent << "servo_indices[]" << std::endl;
    for (size_t i = 0; i < v.servo_indices.size(); ++i)
    {
      s << indent << "  servo_indices[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.servo_indices[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENHAND_NODE_MESSAGE_OPERATINGMODEREQUEST_H
